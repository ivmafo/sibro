package org.koghi.terranvm.entity;

// Generated Feb 28, 2011 11:23:53 AM by Hibernate Tools 3.4.0.Beta1

import java.util.Locale;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.validator.NotNull;

/**
 * RentableUnitContribution generated by hbm2java
 */
@Entity
@Table(name = "rentable_unit_contribution", schema = "public")
public class RentableUnitContribution implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private RentableUnit rentableUnit;
	private ContributionModule contributionModule;
	private Double contributionRate;
	
	public RentableUnitContribution() {
	}

	public RentableUnitContribution(int id, RentableUnit rentableUnit, ContributionModule contributionModule, Double contributionRate) {
		this.id = id;
		this.rentableUnit = rentableUnit;
		this.contributionModule = contributionModule;
		this.contributionRate = contributionRate;
	}
	
	@Override
	public Object clone(){
		RentableUnitContribution ruc = null;
		try {
            ruc = (RentableUnitContribution) super.clone();
        }
        catch (CloneNotSupportedException e) {
            // This should never happen
            throw new InternalError(e.toString());
        }
//        ruc.rentableUnit = (RentableUnit)rentableUnit.clone();
//        ruc.contributionModule = (ContributionModule)contributionModule.clone();
        return ruc;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
			@SequenceGenerator(name = "pk_sequence", sequenceName = "rentable_unit_contribution_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rentable_unit", nullable = false)
	@NotNull
	public RentableUnit getRentableUnit() {
		return this.rentableUnit;
	}

	public void setRentableUnit(RentableUnit rentableUnit) {
		this.rentableUnit = rentableUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contribution_module", nullable = false)
	@NotNull
	public ContributionModule getContributionModule() {
		return this.contributionModule;
	}

	public void setContributionModule(ContributionModule contributionModule) {
		this.contributionModule = contributionModule;
	}

	@Column(name = "contribution_rate", nullable = false, precision = 17, scale = 17)
	public Double getContributionRate() {
		return this.contributionRate;
	}

	public void setContributionRate(Double contributionRate) {
		
		if(contributionRate == null)
			contributionRate = 0.0;
		
		this.contributionRate = contributionRate.doubleValue();
	}
	
	
	
	@Transient
	public Double getContributionRatePorcentual() {
		Locale.setDefault(Locale.ENGLISH);
		if (getContributionRate() != null) {
			return getContributionRate() * 100;
		}else {
			return ((double)0);
		}
	}

	@Transient
	public void setContributionRatePorcentual(Double contributionRate) {
		if (contributionRate != null) {
			
			this.setContributionRate(contributionRate / 100);
		}else{
			this.setContributionRate((double) 0);
		}
	}

}
