package org.koghi.terranvm.entity;

// Generated 28/03/2012 04:59:37 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * CounterConfigurationTamplate generated by hbm2java
 */
@Entity
@Table(name = "counter_configuration_tamplate", schema = "public")
public class CounterConfigurationTamplate implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private String name;
	private int projectId1;
	private List<CounterTemplateHasRetentionRateAccount> counterTemplateHasRetentionRateAccounts;
	private Integer biller;
	
	
	public CounterConfigurationTamplate() {
	}

	public CounterConfigurationTamplate(int id, String name, int projectId1) {
		this.id = id;
		this.name = name;
		this.projectId1 = projectId1;
	}

	public CounterConfigurationTamplate(int id, String name, int projectId1, List<CounterTemplateHasRetentionRateAccount> counterTemplateHasRetentionRateAccounts) {
		this.id = id;
		this.name = name;
		this.projectId1 = projectId1;
		this.counterTemplateHasRetentionRateAccounts = counterTemplateHasRetentionRateAccounts;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@SequenceGenerator(name = "pk_sequence", sequenceName = "counter_template_has_retention_rate_account_id_sec", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "name", nullable = false, length = 100)
	@NotNull
	@Length(max = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "project_id_1", nullable = false)
	public int getProjectId1() {
		return this.projectId1;
	}

	public void setProjectId1(int projectId1) {
		this.projectId1 = projectId1;
	}
	
	@Column(name = "biller", nullable = true)
	public Integer getBiller() {
		return biller;
	}

	public void setBiller(Integer biller) { 
		this.biller = biller;
	} 

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "counterConfigurationTamplate", cascade = CascadeType.ALL)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public List<CounterTemplateHasRetentionRateAccount> getCounterTemplateHasRetentionRateAccounts() {
		if(this.counterTemplateHasRetentionRateAccounts == null)
			this.counterTemplateHasRetentionRateAccounts = new ArrayList<CounterTemplateHasRetentionRateAccount>();
		return this.counterTemplateHasRetentionRateAccounts;
	}

	public void setCounterTemplateHasRetentionRateAccounts(List<CounterTemplateHasRetentionRateAccount> counterTemplateHasRetentionRateAccounts) {
		this.counterTemplateHasRetentionRateAccounts = counterTemplateHasRetentionRateAccounts;
	}
	
	@Transient
	public RetentionRateAccount getAccountReceivable() {
		return searchAccount(RetentionRate.RETENTION_RATE_ACCOUNTS_RECEIVABLE);
	}

	@Transient
	public void setAccountReceivable(
			CounterTemplateHasRetentionRateAccount accountReceivable) {
		setAccount(RetentionRate.RETENTION_RATE_ACCOUNTS_RECEIVABLE,
				accountReceivable);
	}
	
	
	@Transient
	public void setAccount(int typeAccount, CounterTemplateHasRetentionRateAccount account){
		
		boolean flag = true;
		for (CounterTemplateHasRetentionRateAccount counterTemplateHasRetentionRateAccount : counterTemplateHasRetentionRateAccounts) {
			if (counterTemplateHasRetentionRateAccount.getRetentionRateAccountId()
					.getRetentionRate().getId() == typeAccount) {
				counterTemplateHasRetentionRateAccount.setRetentionRateAccountId(account
						.getRetentionRateAccountId());
				flag = false;
				break;
			}
		}

		if (flag) {
			counterTemplateHasRetentionRateAccounts.add(account);
		}
		
	}
	
	
	/**
	 * MÃ‰TODO QUE BUSCA UNA CUENTA CONTABLE EN EL CONJUNTO DE CUENTAS DLE
	 * CONCEPTO
	 * 
	 * @param typeAccount
	 *            tipo de cuenta que se busca en el concepto
	 * @return
	 */
	@Transient
	public RetentionRateAccount searchAccount(int typeAccount) {
		for (CounterTemplateHasRetentionRateAccount counterTemplateHasRetentionRateAccount : counterTemplateHasRetentionRateAccounts) {
			if (counterTemplateHasRetentionRateAccount.getRetentionRateAccountId()
					.getRetentionRate().getId() == typeAccount)
				return counterTemplateHasRetentionRateAccount.getRetentionRateAccountId();
		}
		return null;
	}
	
	
	
	@Transient
	public void setAccountingAccountsRecover(
			CounterTemplateHasRetentionRateAccount accountBank) {
		setAccount(RetentionRate.RETENTION_RATE_BANK_ACCOUNT, accountBank);
	}

	@Transient
	public RetentionRateAccount getAccountingAccountsEarlyPayment() {
		return this.searchAccount(RetentionRate.RETENTION_RATE_DISCOUNT);
	}

	@Transient
	public void setAccountingAccountsEarlyPayment(
			CounterTemplateHasRetentionRateAccount accountDiscount) {
		setAccount(RetentionRate.RETENTION_RATE_DISCOUNT, accountDiscount);
	}

	@Transient
	public RetentionRateAccount getAccountingCreditAccounts() {
		return this.searchAccount(RetentionRate.RETENTION_RATE_INCOME_ACCOUNT);
	}

	@Transient
	public void setAccountingCreditAccounts(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_INCOME_ACCOUNT, accountIncome);
	}

	@Transient
	public RetentionRateAccount getAccountingPenaltyPortafolio() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_PENALTY_OF_PORTAFOLIO);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasBancos() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_BANCOS);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasBancos(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_BANCOS,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasIngresos() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_INGRESOS);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasIngresos(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(
				RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_INGRESOS,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasIVA() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_IVA);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasIVA(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_DE_IVA,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasXCobrar() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_POR_COBRAR);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasXCobrar(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_CUENTAS_POR_COBRAR,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasDeudoraControlContario() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_DEUDORAS_CONTROL_CONTRARIO);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasDeudoraControlContario(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(
				RetentionRate.RETENTION_RATE_SUBCATEGORY_DEUDORAS_CONTROL_CONTRARIO,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasDeudoraControlInteresVencida() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_DEUDORAS_CONTROL_INTERESES_DEUDAS_VENCIDAS);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasDeudoraInteresVencida(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(
				RetentionRate.RETENTION_RATE_SUBCATEGORY_DEUDORAS_CONTROL_INTERESES_DEUDAS_VENCIDAS,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasOtrosIngresos() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_OTROSINGRESOS);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasOtrosIngresos(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_OTROSINGRESOS,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasReteFuente() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEFUENTE);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasReteFuente(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEFUENTE,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasReteICA() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEICA);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasReteICA(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEICA,
				accountIncome);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public RetentionRateAccount getAccountingCDOD_cuentasReteIVA() {
		return this
				.searchAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEIVA);
	}

	/**
	 * SUBCATEGORIA DE Cuentas De Orden Deudora - CDOD-
	 * 
	 */
	@Transient
	public void setAccountingAccountingCDOD_cuentasReteIVA(
			CounterTemplateHasRetentionRateAccount accountIncome) {
		setAccount(RetentionRate.RETENTION_RATE_SUBCATEGORY_RETEIVA,
				accountIncome);
	}
	@Transient
	public RetentionRateAccount getTax() {
		return searchAccount(RetentionRate.RETENTION_RATE_IVA);
	}

	public void setTax(CounterTemplateHasRetentionRateAccount tax) {
		setAccount(RetentionRate.RETENTION_RATE_IVA, tax);
	}
	@Transient
	public RetentionRateAccount getStamptax() {
		return searchAccount(RetentionRate.RETENTION_RATE_TIMBRE);
	}

	public void setStamptax(CounterTemplateHasRetentionRateAccount Stamptax) {
		setAccount(RetentionRate.RETENTION_RATE_TIMBRE, Stamptax);
	}
	
	@Transient
	public void cleanAccount(int id) {
		int i = 0;
		try {
			if(counterTemplateHasRetentionRateAccounts != null)
			for (CounterTemplateHasRetentionRateAccount conceptRetentionRateAccount : counterTemplateHasRetentionRateAccounts) {

				if (conceptRetentionRateAccount.getRetentionRateAccountId()
						.getRetentionRate().getId() == id) {
					counterTemplateHasRetentionRateAccounts.remove(i);
					break;
				}
				i++;
			}
		} catch (Exception e) {
//			System.out
//					.println("------------------------------------------------------------------- ");
			e.printStackTrace();

		}

	}

	

	
	

}
