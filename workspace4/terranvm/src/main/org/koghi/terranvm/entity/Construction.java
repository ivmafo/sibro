package org.koghi.terranvm.entity;

// Generated 05-ene-2011 14:23:53 by Hibernate Tools 3.4.0.Beta1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.hibernate.validator.NotNull;

/**
 * Construction generated by hbm2java
 */
@Audited
@Entity
@Table(name = "construction", schema = "public")
public class Construction implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private RealProperty realProperty;
	private String name;
	private String description;
	private Double area;
	private Set<Floor> floorsList = new HashSet<Floor>(0);
	private Address address;
	private double totalRentableArea;
	private Set<Avaluation> avaluations = new HashSet<Avaluation>(0);
	private Boolean deactivate; //indica si el activo o esta activo o desactivo
	private String motive;

	public Construction() {
		this.deactivate = false;
	}

	public Construction(int id, RealProperty realProperty, String nameConstruction, double totalRentableArea) {
		this.id = id;
		this.realProperty = realProperty;
		this.name = nameConstruction;
		this.totalRentableArea = totalRentableArea;
		this.deactivate = false;
	}

	public Construction(int id, RealProperty realProperty, String nameConstruction, String descriptionConstruction, Set<Floor> floors, double totalRentableArea,Set<Avaluation> avaluations, Double area) {
		this.id = id;
		this.realProperty = realProperty;
		this.name = nameConstruction;
		this.description = descriptionConstruction;
		this.floorsList = floors;
		this.totalRentableArea = totalRentableArea;
		this.avaluations = avaluations;
		this.area = area;
		this.deactivate = false;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
			@SequenceGenerator(name = "pk_sequence", sequenceName = "construction_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "real_property", nullable = false)
	@NotNull
	public RealProperty getRealProperty() {
		return this.realProperty;
	}

	public void setRealProperty(RealProperty realProperty) {
		this.realProperty = realProperty;
	}

	@Column(name = "name", nullable = false)
	@NotNull
	public String getName() {
		return this.name;
	}

	public void setName(String nameConstruction) {
		this.name = nameConstruction;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String descriptionConstruction) {
		this.description = descriptionConstruction;
	}

	@Column(name = "area")
	public Double getArea() {
		return this.area;
	}

	public void setArea(Double area) {
		this.area = area;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "construction", cascade = CascadeType.ALL)
	public Set<Floor> getFloorsList() {
		return this.floorsList;
	}

	public void setFloorsList(Set<Floor> floors) {
		this.floorsList = floors;
	}
	
	@Transient
	public List<Floor> getFloors() {
		return new ArrayList<Floor>(floorsList);
	}

	public void setFloors(List<Floor> floors) {
		this.floorsList = new HashSet<Floor>(floors);
	}

	
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name = "address")
	public Address getAddress() {
		return this.address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}
	
	@Column(name = "total_rentable_area", nullable = false, precision = 17, scale = 17)
	public double getTotalRentableArea() {
		return this.totalRentableArea;
	}

	public void setTotalRentableArea(double totalRentableArea) {
		this.totalRentableArea = totalRentableArea;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "construction", cascade=CascadeType.ALL)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public Set<Avaluation> getAvaluations() {
		return this.avaluations;
	}

	public void setAvaluations(Set<Avaluation> avaluations) {
		this.avaluations = avaluations;
	}
	
	@Column(name = "deactivate", nullable = false)
	public Boolean isDeactivate() {
		return deactivate;
	}

	public void setDeactivate(Boolean state) {
		this.deactivate = state;
	}

	@Column(name = "motive")
	public String getMotive() {
		return motive;
	}

	public void setMotive(String motive) {
		this.motive = motive;
	}

}
