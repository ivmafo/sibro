package org.koghi.terranvm.entity;

// Generated 2/03/2011 03:36:38 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.validator.NotNull;

/**
 * Rol generated by hbm2java
 */
@Entity
@Table(name = "role", schema = "public")
public class Role implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private String roleName;
	private Set<User_Terranvm> users = new HashSet<User_Terranvm>(0);
	private List<Features> Featureses = new ArrayList<Features>(0);

	public Role() {
	}

	public Role(int id, String roleName) {
		this.id = id;
		this.roleName = roleName;
	}

	public Role(int id, String roleName, Set<User_Terranvm> users,
			List<Features> Featureses) {
		this.id = id;
		this.roleName = roleName;
		this.users = users;
		this.Featureses = Featureses;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "role_name", nullable = false)
	@NotNull
	public String getRoleName() {
		return this.roleName;
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "role")
	public Set<User_Terranvm> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User_Terranvm> users) {
		this.users = users;
	}

	@ManyToMany(targetEntity = org.koghi.terranvm.entity.Features.class, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY)
	@JoinTable(name = "ROLE_FEATURES", joinColumns = @JoinColumn(name = "ROLE"), inverseJoinColumns = @JoinColumn(name = "FEATURES"))
	public List<Features> getFeatureses() {
		return Featureses;
	}

	public void setFeatureses(List<Features> featureses) {
		Featureses = featureses;
	}



}
