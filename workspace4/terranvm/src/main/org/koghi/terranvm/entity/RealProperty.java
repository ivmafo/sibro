package org.koghi.terranvm.entity;

// Generated 05-ene-2011 14:23:53 by Hibernate Tools 3.4.0.Beta1

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.hibernate.validator.NotNull;

/**
 * RealProperty generated by hbm2java
 */
@Audited
@Entity
@Table(name = "real_property", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "cadastral_id"))
public class RealProperty implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private LegalNatureOfProperty legalNatureOfProperty;
	private RealPropertyUseType realPropertyUseType;
	private String nameProperty;
	private Date yearBuilt;
	private String enrolmentNumber;
	private Date purchaseDate;
	private double totalSurfaceArea;
	private String cadastralId;
	private double totalContructionArea;
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<RealPropertyContact> realPropertyContacts = new HashSet<RealPropertyContact>(0);
	private Set<ProjectProperty> projectProperties = new HashSet<ProjectProperty>(0);
	private Set<Construction> constructions = new HashSet<Construction>(0);
	private Set<Avaluation> avaluations = new HashSet<Avaluation>(0);
	private List<ContributionModule> contributionModules = new ArrayList<ContributionModule>();
	private List<SalesPeriod> salesPeriods = new ArrayList<SalesPeriod>(0);
	private Double propertyPorcent;
	private int step;
	private Boolean pendingApprove;
	private Boolean deactivate; //indica si el activo o esta activo o desactivo
	private String motive;
	
	private Set<ConstructionLicenses> constructionLicenseses = new HashSet<ConstructionLicenses>(0);
	private Set<SegmentStage> segmentStages = new HashSet<SegmentStage>(0);
	
	private Set<Project> projectRealProperty = new HashSet<Project>(0);
	
	private double totalRentableArea;
	
	public static final int STEP_DRAFT=0;
	public static final int STEP_APPROVAL_PENDING=1;
	public static final int STEP_APPROVED=2;
	

	
	public RealProperty(){

		this.deactivate = false;
	    this.pendingApprove = false;
	}

	public RealProperty(int id, LegalNatureOfProperty legalNatureOfProperty, RealPropertyUseType realPropertyUseType, String namePropertyRealProperty, Date yearBuilt, double totalSurfaceArea, String cadastralId, double totalContructionArea, double totalRentableArea) {
		this.id = id;
		this.legalNatureOfProperty = legalNatureOfProperty;
		this.realPropertyUseType = realPropertyUseType;
		this.nameProperty = namePropertyRealProperty;
		this.yearBuilt = yearBuilt;
		this.totalSurfaceArea = totalSurfaceArea;
		this.cadastralId = cadastralId;
		this.totalContructionArea = totalContructionArea;
		this.totalRentableArea = totalRentableArea;
		this.deactivate = false;
		this.pendingApprove = false;
	}

	public RealProperty(int id, LegalNatureOfProperty legalNatureOfProperty, RealPropertyUseType realPropertyUseType, String namePropertyRealProperty, Date yearBuilt,  String enrolmentNumber, Date purchaseDate, double totalSurfaceArea, String cadastralId, Set<Address> addresses, Set<RealPropertyContact> realPropertyContacts, Set<ProjectProperty> projectProperties, Set<Construction> constructions, List<ContributionModule> contributionModules, double areaConstruction, Double propertyPorcent, List<SalesPeriod> salesPeriods, Set<ConstructionLicenses> constructionLicenseses, Set<SegmentStage> segmentStages, double totalRentableArea,Set<Avaluation> avaluations) {
		this.id = id;
		this.legalNatureOfProperty = legalNatureOfProperty;
		this.realPropertyUseType = realPropertyUseType;
		this.nameProperty = namePropertyRealProperty;
		this.yearBuilt = yearBuilt;
		this.enrolmentNumber = enrolmentNumber;
		this.purchaseDate = purchaseDate;
		this.totalSurfaceArea = totalSurfaceArea;
		this.cadastralId = cadastralId;
		this.totalContructionArea = areaConstruction;
		this.addresses = addresses;
		this.realPropertyContacts = realPropertyContacts;
		this.projectProperties = projectProperties;
		this.constructions = constructions;
		this.contributionModules = contributionModules;
		this.propertyPorcent = propertyPorcent;
		this.salesPeriods = salesPeriods;
		this.constructionLicenseses = constructionLicenseses;
		this.segmentStages = segmentStages;
		this.totalRentableArea = totalRentableArea;
		this.avaluations = avaluations;
		this.deactivate = false;
		this.pendingApprove = false;
		
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
			@SequenceGenerator(name = "pk_sequence", sequenceName = "real_property_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "legal_nature_id", nullable = false)
	@NotNull
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public LegalNatureOfProperty getLegalNatureOfProperty() {
		return this.legalNatureOfProperty;
	}

	public void setLegalNatureOfProperty(LegalNatureOfProperty legalNatureOfProperty) {
		this.legalNatureOfProperty = legalNatureOfProperty;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "use_type", nullable = false)
	@NotNull
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public RealPropertyUseType getRealPropertyUseType() {
		return this.realPropertyUseType;
	}

	public void setRealPropertyUseType(RealPropertyUseType realPropertyUseType) {
		this.realPropertyUseType = realPropertyUseType;
	}

	@Column(name = "name_property", nullable = false)
	@NotNull
	public String getNameProperty() {
		return this.nameProperty;
	}

	public void setNameProperty(String namePropertyRealProperty) {
		this.nameProperty = namePropertyRealProperty;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "year_built", nullable = false, length = 13)
	@NotNull
	public Date getYearBuilt() {
		return this.yearBuilt;
	}

	public void setYearBuilt(Date yearBuilt) {
		this.yearBuilt = yearBuilt;
	}

	
	@Column(name = "enrolment_number")
	public String getEnrolmentNumber() {
		return this.enrolmentNumber;
	}

	public void setEnrolmentNumber(String enrolmentNumber) {
		this.enrolmentNumber = enrolmentNumber;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "purchase_date", length = 13)
	public Date getPurchaseDate() {
		return this.purchaseDate;
	}

	public void setPurchaseDate(Date purchaseDate) {
		this.purchaseDate = purchaseDate;
	}

	@Column(name = "total_surface_area", nullable = false, precision = 17, scale = 17)
	public double getTotalSurfaceArea() {
		return this.totalSurfaceArea;
	}

	public void setTotalSurfaceArea(double totalSurfaceArea) {
		this.totalSurfaceArea = totalSurfaceArea;
	}

	@Column(name = "cadastral_id", unique = true, nullable = false)
	@NotNull
	public String getCadastralId() {
		return this.cadastralId;
	}

	public void setCadastralId(String cadastralId) {
		this.cadastralId = cadastralId;
	}


	@Column(name = "total_contruction_area", precision = 17, scale = 17)
	public double getTotalContructionArea() {
		return this.totalContructionArea;
	}

	public void setTotalContructionArea(double totalContructionArea) {
		this.totalContructionArea = totalContructionArea;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "realProperty")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "realProperty")
	public Set<RealPropertyContact> getRealPropertyContacts() {
		return this.realPropertyContacts;
	}

	public void setRealPropertyContacts(Set<RealPropertyContact> realPropertyContacts) {
		this.realPropertyContacts = realPropertyContacts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "realProperty")
	public Set<ProjectProperty> getProjectProperties() {
		return this.projectProperties;
	}

	public void setProjectProperties(Set<ProjectProperty> projectProperties) {
		this.projectProperties = projectProperties;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "realProperty", cascade=CascadeType.ALL)
	public Set<Construction> getConstructions() {
		return this.constructions;
	}

	public void setConstructions(Set<Construction> constructions) {
		this.constructions = constructions;
	}
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "realProperty", cascade = CascadeType.ALL)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public Set<Avaluation> getAvaluations() {
		return this.avaluations;
	}

	public void setAvaluations(Set<Avaluation> avaluations) {
		this.avaluations = avaluations;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "realProperty", cascade=CascadeType.ALL)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public List<ContributionModule> getContributionModules() {
		return contributionModules;
	}

	public void setContributionModules(List<ContributionModule> contributionModules) {
		this.contributionModules = contributionModules;
	}
	
	
	@Column(name = "property_porcent", precision = 17, scale = 17)
	public Double getPropertyPorcent() {
		return this.propertyPorcent;
	}

	public void setPropertyPorcent(Double propertyPorcent) {
		this.propertyPorcent = propertyPorcent;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "realProperty", cascade = CascadeType.ALL)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public List<SalesPeriod> getSalesPeriods() {
		return this.salesPeriods;
	}

	public void setSalesPeriods(List<SalesPeriod> salesPeriods) {
		this.salesPeriods = salesPeriods;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "realProperty")
	public Set<ConstructionLicenses> getConstructionLicenseses() {
		return this.constructionLicenseses;
	}

	public void setConstructionLicenseses(
			Set<ConstructionLicenses> constructionLicenseses) {
		this.constructionLicenseses = constructionLicenseses;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "realProperty")
	public Set<SegmentStage> getSegmentStages() {
		return this.segmentStages;
	}

	public void setSegmentStages(Set<SegmentStage> segmentStages) {
		this.segmentStages = segmentStages;
	}
	
	@Column(name = "total_rentable_area", nullable = false, precision = 17, scale = 17)
	public double getTotalRentableArea() {
		return this.totalRentableArea;
	}

	public void setTotalRentableArea(double totalRentableArea) {
		this.totalRentableArea = totalRentableArea;
	}
	
	
	@ManyToMany(targetEntity = Project.class, fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinTable(name = "project_has_realproperty", joinColumns = @JoinColumn(name = "realproperty"), inverseJoinColumns = @JoinColumn(name = "project"))
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public Set<Project> getProjectRealProperty() {
		return this.projectRealProperty;
	}

	public void setProjectRealProperty(Set<Project> projectRealProperty) {
		this.projectRealProperty = projectRealProperty;
	}
	
	@Column(name="step",nullable = false)
	public int getStep() {
		return step;
	}

	public void setStep(int step) {
		this.step = step;
	}
	
	@Column(name = "deactivate", nullable = false)
	public Boolean isDeactivate() {
		return deactivate;
	}

	public void setDeactivate(Boolean state) {
		this.deactivate = state;
	}

	@Column (name="motive")
	public String getMotive() {
		return motive;
	}

	public void setMotive(String motive) {
		this.motive = motive;
	}

	@Column(name="pending_approve", nullable = false)
    public Boolean isPendingApprove() {
        return pendingApprove;
    }

    public void setPendingApprove(Boolean pendingApprove) {
        this.pendingApprove = pendingApprove;
    }

}
