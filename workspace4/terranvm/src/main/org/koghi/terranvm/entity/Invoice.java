package org.koghi.terranvm.entity;

// Generated 25-ene-2011 8:50:29 by Hibernate Tools 3.4.0.Beta1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.NotNull;

/**
 * Invoice generated by hbm2java
 */
@Entity
@Table(name = "invoice", schema = "public")
public class Invoice implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	//Tipo de documento Fáctura
	public static final int DOCUMENT_TYPE_BILL = 0;
	//Tipo de documento Cuenta de cobro
	public static final int DOCUMENT_TYPE_ACCOUNT_RECEIVABLE = 1;
	private int id;
	private BusinessEntity billed;
	private BusinessEntity biller;
	private ProjectProperty projectProperty;
	private InvoiceStatus invoiceStatus;
	private String observations;
	private Date creationDate;
	private Date expeditionDate;
	private Date expirationDate;
	private String number;
	private String addressBilled;
	private String addressBiller;
	private String billingResolution;
	private String cityBilled;
	private String cityBiller;
	private String idNumberBilled;
	private String idNumberBiller;
	private String nameBilled;
	private String nameBiller;
	private String phoneBiller;
	private String phoneBilled;
	private boolean approved;
	private String note;
	private Invoice oldInvoice;
	private int groupNumber;
	private int documentType;
	private String prefix;
	private String suffix;
	private RealProperty realProperty;
	private double subtotal;
	private double iva;
	private List<InvoiceConcept> invoiceConcepts = new ArrayList<InvoiceConcept>();
	
	//REVERSION
	@Transient
	private boolean selected = false;
	//REVERSION
	
	//VALIDACIÓN RESOLUCIÓN
	@Transient
	private boolean billingError = false;
	//VALIDACIÓN RESOLUCIÓN

	public Invoice() {
	}

	public Invoice(int id, BusinessEntity billed, BusinessEntity biller, ProjectProperty projectProperty, Date expeditionDate, Date expirationDate, String number, String addressBilled, String addressBiller, String billingResolution, String cityBilled, String cityBiller, String idNumberBilled, String idNumberBiller, String nameBilled, String nameBiller, String phoneBiller, String phoneBilled, InvoiceStatus invoiceStatus, Date creationDate) {
		this.id = id;
		this.billed = billed;
		this.biller = biller;
		this.projectProperty = projectProperty;
		this.expeditionDate = expeditionDate;
		this.expirationDate = expirationDate;
		this.number = number;
		this.addressBilled = addressBilled;
		this.addressBiller = addressBiller;
		this.billingResolution = billingResolution;
		this.cityBilled = cityBilled;
		this.cityBiller = cityBiller;
		this.idNumberBilled = idNumberBilled;
		this.idNumberBiller = idNumberBiller;
		this.nameBilled = nameBilled;
		this.nameBiller = nameBiller;
		this.phoneBiller = phoneBiller;
		this.phoneBilled = phoneBilled;
		this.invoiceStatus = invoiceStatus;
		this.creationDate = creationDate;
	}

	public Invoice(int id, BusinessEntity billed, BusinessEntity biller, ProjectProperty projectProperty, String observations, Date expeditionDate, Date expirationDate, String number, String addressBilled, String addressBiller, String billingResolution, String cityBilled, String cityBiller, String idNumberBilled, String idNumberBiller, String nameBilled, String nameBiller, String phoneBiller, String phoneBilled, List<InvoiceConcept> invoiceConcepts, InvoiceStatus invoiceStatus, String note, Date creationDate, Invoice old, int documentType,RealProperty realProperty, String prefix, String suffix) {
		this.id = id;
		this.billed = billed;
		this.biller = biller;
		this.projectProperty = projectProperty;
		this.observations = observations;
		this.expeditionDate = expeditionDate;
		this.expirationDate = expirationDate;
		this.number = number;
		this.addressBilled = addressBilled;
		this.addressBiller = addressBiller;
		this.billingResolution = billingResolution;
		this.cityBilled = cityBilled;
		this.cityBiller = cityBiller;
		this.idNumberBilled = idNumberBilled;
		this.idNumberBiller = idNumberBiller;
		this.nameBilled = nameBilled;
		this.nameBiller = nameBiller;
		this.phoneBiller = phoneBiller;
		this.phoneBilled = phoneBilled;
		this.invoiceConcepts = invoiceConcepts;
		this.invoiceStatus = invoiceStatus;
		this.note = note;
		this.creationDate = creationDate;
		this.oldInvoice = old;
		this.documentType = documentType;
		this.realProperty = realProperty;
		this.prefix = prefix;
		this.suffix = suffix;
	}
	
	@Override
	public Object clone(){
		
		try {
            return super.clone();
        }
        catch (CloneNotSupportedException e) {
            // This should never happen
            throw new InternalError(e.toString());
        }
        
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@SequenceGenerator(name = "pk_sequence", sequenceName = "invoice_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "billed", nullable = false)
	@NotNull
	public BusinessEntity getBilled() {
		return this.billed;
	}

	public void setBilled(BusinessEntity billed) {
		this.billed = billed;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "biller", nullable = false)
	@NotNull
	public BusinessEntity getBiller() {
		return this.biller;
	}

	public void setBiller(BusinessEntity biller) {
		this.biller = biller;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "project_property", nullable = false)
	@NotNull
	public ProjectProperty getProjectProperty() {
		return this.projectProperty;
	}

	public void setProjectProperty(ProjectProperty projectProperty) {
		this.projectProperty = projectProperty;
	}

	@Column(name = "observations")
	public String getObservations() {
		return this.observations;
	}

	public void setObservations(String observations) {
		this.observations = observations;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expedition_date", nullable = false, length = 13)
	@NotNull
	public Date getExpeditionDate() {
		return this.expeditionDate;
	}

	public void setExpeditionDate(Date expeditionDate) {
		this.expeditionDate = expeditionDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expiration_date", nullable = false, length = 13)
	@NotNull
	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	@Column(name = "number", nullable = true)
	public String getNumber() {
		return this.number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	@Column(name = "address_billed", nullable = false)
	@NotNull
	public String getAddressBilled() {
		return this.addressBilled;
	}

	public void setAddressBilled(String addressBilled) {
		this.addressBilled = addressBilled;
	}

	@Column(name = "address_biller", nullable = false)
	@NotNull
	public String getAddressBiller() {
		return this.addressBiller;
	}

	public void setAddressBiller(String addressBiller) {
		this.addressBiller = addressBiller;
	}

	@Column(name = "billing_resolution", nullable = true)
	public String getBillingResolution() {
		return this.billingResolution;
	}

	public void setBillingResolution(String billingResolution) {
		this.billingResolution = billingResolution;
	}

	@Column(name = "city_billed", nullable = false)
	@NotNull
	public String getCityBilled() {
		return this.cityBilled;
	}

	public void setCityBilled(String cityBilled) {
		this.cityBilled = cityBilled;
	}

	@Column(name = "city_biller", nullable = false)
	@NotNull
	public String getCityBiller() {
		return this.cityBiller;
	}

	public void setCityBiller(String cityBiller) {
		this.cityBiller = cityBiller;
	}

	@Column(name = "id_number_billed", nullable = false)
	@NotNull
	public String getIdNumberBilled() {
		return this.idNumberBilled;
	}

	public void setIdNumberBilled(String idNumberBilled) {
		this.idNumberBilled = idNumberBilled;
	}

	@Column(name = "id_number_biller", nullable = false)
	@NotNull
	public String getIdNumberBiller() {
		return this.idNumberBiller;
	}

	public void setIdNumberBiller(String idNumberBiller) {
		this.idNumberBiller = idNumberBiller;
	}

	@Column(name = "name_billed", nullable = false)
	@NotNull
	public String getNameBilled() {
		return this.nameBilled;
	}

	public void setNameBilled(String nameBilled) {
		this.nameBilled = nameBilled;
	}

	@Column(name = "name_biller", nullable = false)
	@NotNull
	public String getNameBiller() {
		return this.nameBiller;
	}

	public void setNameBiller(String nameBiller) {
		this.nameBiller = nameBiller;
	}

	@Column(name = "phone_biller", nullable = false)
	@NotNull
	public String getPhoneBiller() {
		return this.phoneBiller;
	}

	public void setPhoneBiller(String phoneBiller) {
		this.phoneBiller = phoneBiller;
	}

	@Column(name = "phone_billed", nullable = false)
	@NotNull
	public String getPhoneBilled() {
		return this.phoneBilled;
	}

	public void setPhoneBilled(String phoneBilled) {
		this.phoneBilled = phoneBilled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "invoice")
	public List<InvoiceConcept> getInvoiceConcepts() {
				
		return this.invoiceConcepts;
	}

	public void setInvoiceConcepts(List<InvoiceConcept> invoiceConcepts) {
		this.invoiceConcepts = invoiceConcepts;
	}

	@Transient
	public double totalBalance(){
		double balance = 0.0;
		for (InvoiceConcept ic : this.getInvoiceConcepts()) {
			if(ic.getInvoiceConceptType() != InvoiceConcept.TYPE_CREDIT_NOTE)
				balance += ic.getBalance();
		}
		return balance;
	}
	
	@Transient
	public double subTotal() {
		double total = 0.0;
		for (InvoiceConcept ic : this.getInvoiceConcepts()) {
			if(ic.getInvoiceConceptType() != InvoiceConcept.TYPE_CREDIT_NOTE)
				total += ic.getCalculatedCost();
		}
		return total;
		
	}
	
	@Transient
	public double ivaTotal() {
		double ivatotal = 0.0;
		for (InvoiceConcept ic : this.getInvoiceConcepts()) {
			if(ic.getInvoiceConceptType() != InvoiceConcept.TYPE_CREDIT_NOTE)
				ivatotal += ic.getCalculatedTax();
		}
		return ivatotal;
	}
	
	@Transient
	public double total(){
		return ivaTotal()+subTotal();
	}
	

	@Column(name = "approved")
	public boolean isApproved() {
		return this.approved;
	}

	public void setApproved(boolean approved) {
		this.approved = approved;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "invoice_status", nullable = false)
	@NotNull
	public InvoiceStatus getInvoiceStatus() {
		return this.invoiceStatus;
	}

	public void setInvoiceStatus(InvoiceStatus invoiceStatus) {
		this.invoiceStatus = invoiceStatus;
	}

	@Column(name = "note")
	public String getNote() {
		return note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "creation_date", nullable = false, length = 13)
	@NotNull
	public Date getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "old_invoice", nullable = true)
	public Invoice getOldInvoice() {
		return oldInvoice;
	}

	public void setOldInvoice(Invoice oldInvoice) {
		this.oldInvoice = oldInvoice;
	}

	@Column(name = "group_number", nullable = false)
	@NotNull
	public int getGroupNumber() {
		return groupNumber;
	}

	public void setGroupNumber(int groupNumber) {
		this.groupNumber = groupNumber;
	}
	
	@Column(name = "document_type")
	public Integer getDocumentType() {
		return this.documentType;
	}

	public void setDocumentType(Integer documentType) {
		this.documentType = documentType;
	}

	@Transient
	public boolean isSelected() {
		return selected;
	}

	@Transient
	public void setSelected(boolean selected) {
		this.selected = selected;
	}

	@Transient
	public boolean isBillingError() {
		return billingError;
	}

	@Transient
	public void setBillingError(boolean billingError) {
		this.billingError = billingError;
	}
	
	
	
	
	
	@Transient
	public String messajeError;
	
	@Transient
	public String getMessajeError() {
		return messajeError;
	}

	@Transient
	public void setMessajeError(String messajeError) {
		this.messajeError = messajeError;
	}
	
	
	
	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "real_property")
	public RealProperty getRealProperty() {
		return this.realProperty;
	}

	public void setRealProperty(RealProperty realProperty) {
		this.realProperty = realProperty;
	}
	
	@Column(name = "prefix")
	public String getPrefix() {
		return this.prefix;
	}

	public void setPrefix(String prefix) {
		this.prefix = prefix;
	}

	@Column(name = "suffix")
	public String getSuffix() {
		return this.suffix;
	}

	public void setSuffix(String suffix) {
		this.suffix = suffix;
	}
	
	

	
	public void print(){
		
		System.out.println("- INVOICE VALUES -");
		System.out.println("id "+this.id);
		System.out.println("billed "+this.billed);
		System.out.println("biller "+this.biller);
		System.out.println("projectProperty "+this.projectProperty);
		System.out.println("invoiceStatus "+this.invoiceStatus);
		System.out.println("observations "+this.observations);
		System.out.println("creationDate "+this.creationDate);
		System.out.println("expeditionDate "+this.expeditionDate);
		System.out.println("expirationDate "+this.expirationDate);
		System.out.println("number "+this.number);
		System.out.println("addressBilled "+this.addressBilled);
		System.out.println("addressBiller "+this.addressBiller);
		System.out.println("billingResolution "+this.billingResolution);
		System.out.println("cityBilled "+this.cityBilled);
		System.out.println("cityBiller "+this.cityBiller);
		System.out.println("idNumberBilled "+this.idNumberBilled);
		System.out.println("idNumberBiller "+this.idNumberBiller);
		System.out.println("nameBilled "+this.nameBilled);
		System.out.println("nameBiller "+this.nameBiller);
		System.out.println("phoneBiller "+this.phoneBiller);
		System.out.println("phoneBilled "+this.phoneBilled);
		System.out.println("approved "+this.approved);
		System.out.println("note "+this.note);
		System.out.println("oldInvoice "+this.oldInvoice);
		System.out.println("groupNumber "+this.groupNumber);
		System.out.println("documentType "+this.documentType);
		System.out.println("RealProperty "+this.realProperty.getId());
		System.out.println("invoiceConcepts "+this.invoiceConcepts);
		System.out.println();
		
	}

	@Transient
	public double getSubtotal() {
		return subtotal;
	}

	@Transient
	public void setSubtotal(double subtotal) {
		this.subtotal = subtotal;
	}

	@Transient
	public double getIva() {
		return iva;
	}

	@Transient
	public void setIva(double iva) {
		this.iva = iva;
	}

	@Transient
	public double getTotal() {
		return subtotal+iva;
	}

}