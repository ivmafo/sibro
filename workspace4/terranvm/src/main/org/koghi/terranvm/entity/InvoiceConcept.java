package org.koghi.terranvm.entity;

// Generated 24-ene-2011 15:17:43 by Hibernate Tools 3.4.0.Beta1

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.NotNull;

/**
 * InvoiceConcept generated by hbm2java
 */
@Entity
@Table(name = "invoice_concept", schema = "public")
public class InvoiceConcept implements java.io.Serializable, Cloneable,
		Comparable<InvoiceConcept> {

	public static final short TYPE_NORMAL = 1;
	public static final short TYPE_RETROACTIVE = 2;
	public static final short TYPE_INTEREST = 3;
	public static final short TYPE_CREDIT_NOTE = 4;
	public static final short TYPE_STAMPTAX = 5;
	public static final short TYPE_REVERSED = 6;// Cuando un invoice_concept ha
												// sido reversado

	// values for credit_note_status column
	public static final short CREDIT_NOTE_STATUS_NONE = 0; // No hay Nota
															// credito y si
															// existe ya esta
															// aprobada
	public static final short CREDIT_NOTE_STATUS_APPROVAL_PENDING = 1; // Se
																		// hizo
																		// una
																		// nota
																		// credito
																		// y no
																		// se ha
																		// aprobado

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private Invoice invoice;
	private Concept concept;
	private Date lastLiquidationDate;
	private Date iniPeriodDate;
	private Date endPeriodDate;
	private double calculatedTax;
	private double calculatedCost;
	private int rentableUnitId;
	private Double balance;
	private List<RecoverConcept> recoverConcepts = new ArrayList<RecoverConcept>();
	private CreditNote creditNote;
	private String expressionConcept;
	private String expressionIncrement;
	private boolean seed;
	private short invoiceConceptType;
	private InvoiceConcept invoiceConceptParent;
	private byte[] conceptSerializable;
	private double appliedRate;
	private Boolean discount;
	private String reason;
	private Integer siigoBillingSequence;
	private Integer siigoBillingSequenceToCreditNote;
	private List<InvoiceConcept> invoiceConceptChildren = new ArrayList<InvoiceConcept>();
	private Date penaltyDate;
	private short creditNoteStatus;
	private String billedPeriod;
	private Integer discountMounths = 0;
	private Double newBalance;

	@Transient
	private Double recoverValue;

	@Transient
	private boolean selected = false;

	@Transient
	private boolean parented;

	public InvoiceConcept() {
	}

	public InvoiceConcept(int id, Invoice invoice, Concept concept,
			Date lastLiquidationDate, Date iniPeriodDate, Date endPeriodDate,
			double calculatedTax, double calculatedCost, int rentableUnitId,
			Double balance, CreditNote creditNote, String expressionConcept,
			String expressionIncrement, boolean seed, short invoiceConceptType,
			InvoiceConcept invoiceConceptParent, double appliedRate,
			Boolean discount, String reason, Integer siigoBillingSequence,
			Date penaltyDate, short creditNoteStatus, String billedPeriod,
			Integer discountMounths) {

		this.id = id;
		this.invoice = invoice;
		this.concept = concept;
		this.lastLiquidationDate = lastLiquidationDate;
		this.iniPeriodDate = iniPeriodDate;
		this.endPeriodDate = endPeriodDate;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
		this.rentableUnitId = rentableUnitId;
		this.balance = balance;
		this.creditNote = creditNote;
		this.expressionConcept = expressionConcept;
		this.expressionIncrement = expressionIncrement;
		this.seed = seed;
		this.invoiceConceptType = invoiceConceptType;
		this.invoiceConceptParent = invoiceConceptParent;
		this.appliedRate = appliedRate;
		this.discount = discount;
		this.reason = reason;
		this.siigoBillingSequence = siigoBillingSequence;
		this.penaltyDate = penaltyDate;
		this.creditNoteStatus = creditNoteStatus;
		this.billedPeriod = billedPeriod;
		this.discountMounths = discountMounths;

	}

	public InvoiceConcept(int id, Concept concept, Invoice invoice,
			short invoiceConceptType, Date lastLiquidationDate, Double balance,
			double calculatedTax, double calculatedCost) {
		this.id = id;
		this.concept = concept;
		this.invoice = invoice;
		this.invoiceConceptType = invoiceConceptType;
		this.lastLiquidationDate = lastLiquidationDate;
		this.balance = balance;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
	}

	public InvoiceConcept(int id, Concept concept, Invoice invoice,
			short invoiceConceptType, Date lastLiquidationDate,
			double calculatedCost, Double balance, double calculatedTax, InvoiceConcept parent, int rentableUnitId) {
		this.id = id;
		this.concept = concept;
		this.invoice = invoice;
		this.invoiceConceptType = invoiceConceptType;
		this.lastLiquidationDate = lastLiquidationDate;
		this.balance = balance;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
		this.invoiceConceptParent = parent;
		this.rentableUnitId = rentableUnitId;

	}
	public InvoiceConcept(int id, Concept concept, Invoice invoice,
			short invoiceConceptType, Date lastLiquidationDate,
			double calculatedCost, Double balance, double calculatedTax, int rentableUnitId) {
		this.id = id;
		this.concept = concept;
		this.invoice = invoice;
		this.invoiceConceptType = invoiceConceptType;
		this.lastLiquidationDate = lastLiquidationDate;
		this.balance = balance;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
		this.rentableUnitId = rentableUnitId;

	}

	public InvoiceConcept(int id, Concept concept, Invoice invoice,
			short invoiceConceptType, Date lastLiquidationDate,
			int rentableUnitId, Double balance) {
		this.id = id;
		this.concept = concept;
		this.invoice = invoice;
		this.invoiceConceptType = invoiceConceptType;
		this.lastLiquidationDate = lastLiquidationDate;
		this.rentableUnitId = rentableUnitId;
		this.balance = balance;
	}

	public InvoiceConcept(int id, Invoice invoice, Concept concept,
			double calculatedTax, double calculatedCost, Date liquidationDate,
			Double balance) {
		this.id = id;
		this.invoice = invoice;
		this.concept = concept;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
		this.lastLiquidationDate = liquidationDate;
		this.balance = balance;
	}

	public InvoiceConcept(int id, Invoice invoice, Concept concept,
			Date lastLiquidationDate, double calculatedTax,
			double calculatedCost, Integer rentableUnitId, Double balance,
			List<RecoverConcept> recoverConcepts, CreditNote creditNote,
			byte[] conceptSerializable, double appliedRate, Boolean discount,
			String reason, Integer siigoBillingSequence) {
		this.id = id;
		this.invoice = invoice;
		this.concept = concept;
		this.lastLiquidationDate = lastLiquidationDate;
		this.calculatedTax = calculatedTax;
		this.calculatedCost = calculatedCost;
		this.rentableUnitId = rentableUnitId;
		this.balance = balance;
		this.recoverConcepts = recoverConcepts;
		this.creditNote = creditNote;
		this.conceptSerializable = conceptSerializable;
		this.appliedRate = appliedRate;
		this.discount = discount;
		this.reason = reason;
		this.siigoBillingSequence = siigoBillingSequence;
	}

	@Override
	public Object clone() {

		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			// This should never happen
			throw new InternalError(e.toString());
		}

	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@SequenceGenerator(name = "pk_sequence", sequenceName = "invoice_concept_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "invoice", nullable = false)
	@NotNull
	public Invoice getInvoice() {
		return this.invoice;
	}

	public void setInvoice(Invoice invoice) {
		this.invoice = invoice;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "concept", nullable = false)
	@NotNull
	public Concept getConcept() {
		return this.concept;
	}

	public void setConcept(Concept concept) {
		this.concept = concept;
	}

	@Column(name = "calculated_tax", nullable = false, precision = 17, scale = 17)
	public double getCalculatedTax() {
		return this.calculatedTax;
	}

	public void setCalculatedTax(double calculatedTax) {
		this.calculatedTax = calculatedTax;
	}

	@Column(name = "calculated_cost", nullable = false)
	@NotNull
	public double getCalculatedCost() {
		return this.calculatedCost;
	}

	public void setCalculatedCost(double calculatedCost) {
		this.calculatedCost = calculatedCost;
	}

	@Column(name = "last_liquidation_date", nullable = false)
	@NotNull
	public Date getLastLiquidationDate() {
		return lastLiquidationDate;
	}

	public void setLastLiquidationDate(Date lastLiquidationDate) {
		this.lastLiquidationDate = lastLiquidationDate;
	}

	@Column(name = "rentable_unit_id")
	public int getRentableUnitId() {
		return rentableUnitId;
	}

	public void setRentableUnitId(int rentableUnitId) {
		this.rentableUnitId = rentableUnitId;
	}

	@Column(name = "balance", nullable = false, precision = 17, scale = 17)
	@NotNull
	public Double getBalance() {
		return this.balance;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "invoiceConcept")
	public List<RecoverConcept> getRecoverConcepts() {
		return this.recoverConcepts;
	}

	public void setRecoverConcepts(List<RecoverConcept> recoverConcepts) {
		this.recoverConcepts = recoverConcepts;
	}

	@Transient
	public double getTotal() {
		return this.calculatedCost + calculatedTax;
	}

	@Transient
	public Double getRecoverValue() {
		if (recoverValue == null)
			return 0.0;
		return recoverValue;
	}

	public void setRecoverValue(Double recoverValue) {
		if (recoverValue != null)
			this.recoverValue = recoverValue;
		else
			this.recoverValue = 0.0;
	}

	public void setBalance(Double balance) {
		this.balance = balance;
	}

	@Transient
	public boolean isSelected() {
		return selected;
	}

	public void setSelected(boolean selected) {
		this.selected = selected;
	}

	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinColumn(name = "credit_note", nullable = true)
	public CreditNote getCreditNote() {
		return creditNote;
	}

	public void setCreditNote(CreditNote creditNote) {
		this.creditNote = creditNote;
	}

	@Column(name = "ini_period_date", nullable = false)
	@NotNull
	public Date getIniPeriodDate() {
		return iniPeriodDate;
	}

	public void setIniPeriodDate(Date iniPeriodDate) {
		this.iniPeriodDate = iniPeriodDate;
	}

	@Column(name = "end_period_date", nullable = false)
	@NotNull
	public Date getEndPeriodDate() {
		return endPeriodDate;
	}

	public void setEndPeriodDate(Date endPeriodDate) {
		this.endPeriodDate = endPeriodDate;
	}

	@Column(name = "expression_concept", nullable = false)
	@NotNull
	public String getExpressionConcept() {
		return expressionConcept;
	}

	public void setExpressionConcept(String expression_concept) {
		this.expressionConcept = expression_concept;
	}

	@Column(name = "expression_increment", nullable = true)
	public String getExpressionIncrement() {
		return expressionIncrement;
	}

	public void setExpressionIncrement(String expression_increment) {
		this.expressionIncrement = expression_increment;
	}

	@Column(name = "invoice_concept_type", nullable = false)
	public short getInvoiceConceptType() {
		return invoiceConceptType;
	}

	public void setInvoiceConceptType(short invoiceConceptType) {
		this.invoiceConceptType = invoiceConceptType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "invoice_concept_parent", nullable = true)
	public InvoiceConcept getInvoiceConceptParent() {
		return invoiceConceptParent;
	}

	public void setInvoiceConceptParent(InvoiceConcept invoiceConceptParent) {
		this.invoiceConceptParent = invoiceConceptParent;
	}

	@Column(name = "concept_serializable")
	public byte[] getConceptSerializable() {
		return this.conceptSerializable;
	}

	public void setConceptSerializable(byte[] conceptSerializable) {
		this.conceptSerializable = conceptSerializable;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "invoiceConceptParent")
	public List<InvoiceConcept> getInvoiceConceptChildren() {
		return invoiceConceptChildren;
	}

	public void setInvoiceConceptChildren(
			List<InvoiceConcept> invoiceConceptChildren) {
		this.invoiceConceptChildren = invoiceConceptChildren;
	}

	@Column(name = "siigo_billing_sequence")
	public Integer getSiigoBillingSequence() {
		return this.siigoBillingSequence;
	}

	public void setSiigoBillingSequence(Integer siigoBillingSequence) {
		this.siigoBillingSequence = siigoBillingSequence;
	}

	public int compareTo(InvoiceConcept invoiceConcept) {

		if (this.iniPeriodDate.before(invoiceConcept.getIniPeriodDate()))
			return -1;
		if (this.iniPeriodDate.after(invoiceConcept.getIniPeriodDate()))
			return 1;
		else {

			if (this.invoiceConceptType != InvoiceConcept.TYPE_NORMAL
					&& invoiceConcept.invoiceConceptType == InvoiceConcept.TYPE_NORMAL)
				return 1;
			else if (this.invoiceConceptType == InvoiceConcept.TYPE_NORMAL
					&& invoiceConcept.invoiceConceptType != InvoiceConcept.TYPE_NORMAL)
				return -1;
			else {

				if (this.concept.getPriority() < invoiceConcept.getConcept()
						.getPriority())
					return 1;
				if (this.concept.getPriority() > invoiceConcept.getConcept()
						.getPriority())
					return -1;
				else {

					if (this.balance < invoiceConcept.balance) {
						return 1;
					} else if (this.balance > invoiceConcept.balance)
						return -1;
					else
						return 0;
				}
			}
		}

	}

	@Column(name = "seed")
	public boolean isSeed() {
		return seed;
	}

	public void setSeed(boolean seed) {
		this.seed = seed;
	}

	@Column(name = "applied_rate")
	public double getAppliedRate() {
		return this.appliedRate;
	}

	public void setAppliedRate(double appliedRate) {
		this.appliedRate = appliedRate;
	}

	@Transient
	public boolean isParented() {
		return parented;
	}

	public void setParented(boolean parented) {
		this.parented = parented;
	}

	@Column(name = "discount")
	public Boolean getDiscount() {
		return this.discount;
	}

	public void setDiscount(Boolean discount) {
		this.discount = discount;
	}

	@Column(name = "reason")
	public String getReason() {
		return this.reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "penalty_date", nullable = true, length = 13)
	public Date getPenaltyDate() {
		return penaltyDate;
	}

	public void setPenaltyDate(Date penaltyDate) {
		this.penaltyDate = penaltyDate;
	}

	@Column(name = "credit_note_status")
	public short getCreditNoteStatus() {
		return creditNoteStatus;
	}

	public void setCreditNoteStatus(short creditNoteStatus) {
		this.creditNoteStatus = creditNoteStatus;
	}

	@Transient
	public String getRecoverValure() {
		Locale.setDefault(Locale.ENGLISH);
		DecimalFormat formato = new DecimalFormat("#######.00");
		return formato.format(this.getRecoverValue());
	}

	public void setRecoverValure(String recover) {
		this.setRecoverValue(Double.parseDouble(recover));

	}

	@Transient
	public String getCalculatedCosts() {
		return formatToString2(this.calculatedCost);
	}

	public void setCalculatedCosts(double calculatedCost) {
		this.calculatedCost = calculatedCost;
	}

	@Transient
	public String getCalculatedTaxes() {
		return formatToString2(this.calculatedTax);
	}

	public void setCalculatedTaxes(double calculatedTax) {
		this.calculatedTax = calculatedTax;
	}

	@Transient
	public String getBalances() {
		return formatToString2(this.balance);
	}

	public void setBalances(double balance) {
		this.balance = balance;
	}

	@Transient
	public String getRecoverValues() {

		return formatToString2(recoverValue);
	}

	public void setRecoverValues(Double recoverValue) {
		if (recoverValue != null)
			this.recoverValue = recoverValue;
		else
			this.recoverValue = 0.0;
	}

	public String formatToString2(double x) {
		Locale.setDefault(Locale.ENGLISH);
		DecimalFormat formato = new DecimalFormat("#######.00");
		return formato.format(x);
	}

	@Transient
	public String getBalance2() {
		DecimalFormat formato = new DecimalFormat("#,###,###.####");
		return formato.format(this.balance);
	}

	public void setBalance2(double balances) {
		this.balance = balances;
	}

	public void setBilledPeriod(String billedPeriod) {
		this.billedPeriod = billedPeriod;
	}

	@Column(name = "billed_period")
	public String getBilledPeriod() {
		return billedPeriod;
	}

	public void setDiscountMounths(Integer discountMounths) {
		if (discountMounths != null) 
		this.discountMounths = discountMounths;
	}

	@Column(name = "discount_mounths")
	public Integer getDiscountMounths() {
		return discountMounths;
	}

	@Transient
	public String datePenalty() {
		java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
				"dd/MM/yyyy");
		if (penaltyDate != null)
			return sdf.format(penaltyDate);
		return "";
	}
	
	@Column(name="siigo_billing_sequence_to_credit_note")
	public Integer getSiigoBillingSequenceToCreditNote() {
		return siigoBillingSequenceToCreditNote;
	}

	public void setSiigoBillingSequenceToCreditNote(Integer siigoBillingSequenceToCreditNote) {
		this.siigoBillingSequenceToCreditNote = siigoBillingSequenceToCreditNote;
	}

	@Column(name="new_balance",nullable = true)
	public Double getNewBalance() {
		return newBalance;
	}

	public void setNewBalance(Double newBalance) {
		this.newBalance = newBalance;
	}

}