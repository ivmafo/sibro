package org.koghi.terranvm.entity;

// Generated 05-ene-2011 12:42:23 by Hibernate Tools 3.4.0.Beta1

import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.hibernate.validator.NotNull;

/**
 * RentableUnit generated by hbm2java
 */
@Audited
@Entity
@Table(name = "rentable_unit", schema = "public")
public class RentableUnit implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private RentableUnit rentableUnit;
	private Area area;
	private RentableUnitType rentableUnitType;
	private Double meters;
	private String name;
	private BusinessEntity businessEntityByOwner;
	private BusinessEntity businessEntityByLessee;
	private Set<ProjectProperty> projectProperties = new HashSet<ProjectProperty>(0);
	private Set<RentableUnit> rentableUnits = new HashSet<RentableUnit>(0);
	private Set<Sales> saleses = new HashSet<Sales>(0);
	private String buildingPermit;
	private String construcionEnrollment;
	private double totalRentableArea;
	private PhoneNumber phoneNumberByPhonenumberLessee;
	private Address addressByAddressLessee;
	private Address addressByAddressOwner;
	private PhoneNumber phoneNumberByPhonenumbeOwner;
	private String concept;
	private String periodicity;
	private Double valueConcept;
	private int costCenter;
	private Boolean deactivate; // indica si el activo o esta activo o desactivo
	private String motive;
	private Boolean pendingApprove;

	public RentableUnit() {
		this.deactivate = false;
		this.pendingApprove = true;
	}

	public RentableUnit(int id, RentableUnitType rentableUnitType, RentableUnit rentableUnit, Area area, String name, double totalRentableArea, PhoneNumber phoneNumberByPhonenumberLessee, Address addressByAddressLessee, Address addressByAddressOwner, PhoneNumber phoneNumberByPhonenumbeOwner) {
		this.id = id;
		this.rentableUnit = rentableUnit;
		this.area = area;
		this.name = name;
		this.rentableUnitType = rentableUnitType;
		this.totalRentableArea = totalRentableArea;
		this.addressByAddressLessee = addressByAddressLessee;
		this.phoneNumberByPhonenumberLessee = phoneNumberByPhonenumberLessee;
		this.addressByAddressOwner = addressByAddressOwner;
		this.phoneNumberByPhonenumbeOwner = phoneNumberByPhonenumbeOwner;
		this.deactivate = false;
		this.pendingApprove = true;
	}

	@Override
	public Object clone() {

		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			// This should never happen
			throw new InternalError(e.toString());
		}

	}

	public RentableUnit(int id, RentableUnitType rentableUnitType, RentableUnit rentableUnit, Area area, BusinessEntity businessEntityByOwner, BusinessEntity businessEntityByLessee, Set<RentableUnit> rentableUnits, String name, Double meters, ProjectProperty projectProperty, Set<Sales> saleses, String buildingPermit, String construcionEnrollment, double totalRentableArea, String concept, String periodicity, Double valueConcept, int costCenter) {
		this.id = id;
		this.rentableUnit = rentableUnit;
		this.area = area;
		this.rentableUnits = rentableUnits;
		this.name = name;
		this.meters = meters;
		this.businessEntityByOwner = businessEntityByOwner;
		this.businessEntityByLessee = businessEntityByLessee;
		this.rentableUnitType = rentableUnitType;
		this.saleses = saleses;
		this.buildingPermit = buildingPermit;
		this.construcionEnrollment = construcionEnrollment;
		this.totalRentableArea = totalRentableArea;
		this.concept = concept;
		this.periodicity = periodicity;
		this.valueConcept = valueConcept;
		this.costCenter = costCenter;
		this.deactivate = false;
		this.pendingApprove = true;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@SequenceGenerator(name = "pk_sequence", sequenceName = "rentable_unit_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pk_sequence")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rentable_unit", nullable = true)
	public RentableUnit getRentableUnit() {
		return this.rentableUnit;
	}

	public void setRentableUnit(RentableUnit rentableUnit) {
		this.rentableUnit = rentableUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "area", nullable = false)
	@NotNull
	public Area getArea() {
		return this.area;
	}

	public void setArea(Area area) {
		this.area = area;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rentableUnit")
	public Set<RentableUnit> getRentableUnits() {
		return this.rentableUnits;
	}

	public void setRentableUnits(Set<RentableUnit> rentableUnits) {
		this.rentableUnits = rentableUnits;
	}

	@Column(name = "square_meters")
	public Double getMeters() {
		return meters;
	}

	public void setMeters(Double meters) {
		this.meters = meters;
	}

	@Column(name = "name", nullable = false)
	@NotNull
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "owner")
	public BusinessEntity getBusinessEntityByOwner() {
		return businessEntityByOwner;
	}

	public void setBusinessEntityByOwner(BusinessEntity businessEntityByOwner) {
		this.businessEntityByOwner = businessEntityByOwner;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "lessee")
	public BusinessEntity getBusinessEntityByLessee() {
		return businessEntityByLessee;
	}

	public void setBusinessEntityByLessee(BusinessEntity businessEntityByLessee) {
		this.businessEntityByLessee = businessEntityByLessee;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rentableUnit")
	public Set<ProjectProperty> getProjectProperties() {
		return this.projectProperties;
	}

	public void setProjectProperties(Set<ProjectProperty> projectProperties) {
		this.projectProperties = projectProperties;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rentable_unit_type", nullable = false)
	@NotNull
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@NotAudited
	public RentableUnitType getRentableUnitType() {
		return this.rentableUnitType;
	}

	public void setRentableUnitType(RentableUnitType rentableUnitType) {
		this.rentableUnitType = rentableUnitType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rentableUnit", cascade = CascadeType.ALL)
	public Set<Sales> getSaleses() {
		return this.saleses;
	}

	public void setSaleses(Set<Sales> saleses) {
		this.saleses = saleses;
	}

	@Column(name = "building_permit")
	public String getBuildingPermit() {
		return this.buildingPermit;
	}

	public void setBuildingPermit(String buildingPermit) {
		this.buildingPermit = buildingPermit;
	}

	@Column(name = "construcion_enrollment")
	public String getConstrucionEnrollment() {
		return this.construcionEnrollment;
	}

	public void setConstrucionEnrollment(String construcionEnrollment) {
		this.construcionEnrollment = construcionEnrollment;
	}

	@Column(name = "total_rentable_area", nullable = false, precision = 17, scale = 17)
	public double getTotalRentableArea() {
		return this.totalRentableArea;
	}

	public void setTotalRentableArea(double totalRentableArea) {
		this.totalRentableArea = totalRentableArea;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "phonenumber_lessee")
	public PhoneNumber getPhoneNumberByPhonenumberLessee() {
		return this.phoneNumberByPhonenumberLessee;
	}

	public void setPhoneNumberByPhonenumberLessee(PhoneNumber phoneNumberByPhonenumberLessee) {
		this.phoneNumberByPhonenumberLessee = phoneNumberByPhonenumberLessee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "address_lessee")
	public Address getAddressByAddressLessee() {
		return this.addressByAddressLessee;
	}

	public void setAddressByAddressLessee(Address addressByAddressLessee) {
		this.addressByAddressLessee = addressByAddressLessee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "phonenumbe_owner")
	public PhoneNumber getPhoneNumberByPhonenumbeOwner() {
		return this.phoneNumberByPhonenumbeOwner;
	}

	public void setPhoneNumberByPhonenumbeOwner(PhoneNumber phoneNumberByPhonenumbeOwner) {
		this.phoneNumberByPhonenumbeOwner = phoneNumberByPhonenumbeOwner;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "address_owner")
	public Address getAddressByAddressOwner() {
		return this.addressByAddressOwner;
	}

	public void setAddressByAddressOwner(Address addressByAddressOwner) {
		this.addressByAddressOwner = addressByAddressOwner;
	}

	@Column(name = "concept")
	public String getConcept() {
		return this.concept;
	}

	public void setConcept(String concept) {
		this.concept = concept;
	}

	@Column(name = "periodicity")
	public String getPeriodicity() {
		return this.periodicity;
	}

	public void setPeriodicity(String periodicity) {
		this.periodicity = periodicity;
	}

	@Column(name = "value_concept")
	public Double getValueConcept() {
		return this.valueConcept;
	}

	public void setValueConcept(Double valueConcept) {
		this.valueConcept = valueConcept;
	}

	@Column(name = "cost_center")
	public int getCostCenter() {
		return this.costCenter;
	}

	public void setCostCenter(int costCenter) {
		this.costCenter = costCenter;
	}

	@Column(name = "deactivate", nullable = false)
	public Boolean isDeactivate() {
		return deactivate;
	}

	public void setDeactivate(Boolean deactivate) {
		this.deactivate = deactivate;
	}

	@Column(name = "motive")
	public String getMotive() {
		return motive;
	}

	public void setMotive(String motive) {
		this.motive = motive;
	}

	@Column(name = "pending_approve", nullable = false)
	public Boolean isPendingApprove() {
		return pendingApprove;
	}

	public void setPendingApprove(Boolean pendingApprove) {
		this.pendingApprove = pendingApprove;
	}

	/**
	 * Metodo que retorna en forma de arreglo las ventas de unidad arrendable.
	 * Este metodo tiene como próposito retornar ser utilizado en las Formulas
	 * de Calculo.
	 * 
	 * @return
	 */
	@Transient
	public String getSalesRentableUnit() {

		StringBuilder salesString = new StringBuilder("var VTAS = new Array(); ");


		if (this.getSaleses().isEmpty()) {
			int monthly = (Calendar.getInstance().get(Calendar.YEAR) * 12) + (Calendar.getInstance().get(Calendar.MONTH));
			salesString.append("VTAS [").append(monthly).append("] = 0.00; ");
			salesString = completeSales(salesString);
		} else {
			/* Se recorren las ventas de la unidad arrendable */
			Iterator<Sales> it = this.getSaleses().iterator();
			while (it.hasNext()) {
				Sales sale = (Sales) it.next();
				int monthly = (sale.getSalesPeriod().getYear() * 12) + (sale.getSalesPeriod().getMonth());
				salesString.append("VTAS [").append(monthly).append("] = ").append(sale.getValue()).append("; ");
			}
			salesString = completeSales(salesString);
		}

		return salesString.toString();
	}

	/**
	 * Método que se encarga de completar las ventas que no se encuentran con
	 * unperiodo de dos anios
	 * 
	 * @param monthliesAdded
	 * @param salesString
	 * @return
	 */
	@Transient
	private StringBuilder completeSales(StringBuilder salesString) {
		
		Calendar currentDate = Calendar.getInstance();
		currentDate.add(Calendar.YEAR, -2);
		
		int periodMonthlyStart = (currentDate.get(Calendar.YEAR) * 12) + (currentDate.get(Calendar.MONTH));

		int periodMonthlyEnd = (currentDate.get(Calendar.YEAR) * 12) + (currentDate.get(Calendar.MONTH) + 1);


		for (int i = periodMonthlyStart; i <= periodMonthlyEnd; i++) {
				salesString.append("VTAS [").append(i).append("] = 0.00; ");
		}
		return salesString;
	}

}
